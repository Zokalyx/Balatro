@startuml

    class Jugador {
        + Jugador(mazo: Mazo)
        + repartirMano()
        + jugarMano() : int
        + seleccionarCarta(carta: Poker)
    }

    class Mano {
        - maximoCartas: int
        - maximoCartasSeleccionadas: int
        + Mano()
        + repartirUsando(mazo : Mazo)
        + seleccionarCarta(carta: Poker)
        + deseleccionarCarta(carta: Poker)
        + jugar() : Jugada
        + modificarPuntaje(puntaje: Puntaje)
    }

    class Mazo {
        + tomarCarta() : Poker
    }

    interface Carta {
        + usar() : int
    }

    class Poker implements Carta {
        - String simbolo
        - int multiplicador
        - int valorNumerico
        + Poker(multiplicador : int, caracter : String, valorNumerico : int, palo : Palo)
        + getPalo() : Palo
        + setValorNumerico(valorNumerico : int)
        + setMultiplicador(multiplicador : int)
    }

    abstract class Jugada {
        - multiplicadorBase : int
        - valorBase : int
        + Jugada(cartas: Poker[*])
        + modificarPuntaje(puntaje: Puntaje)
    }

    class Puntaje {
        + Puntaje(ArrayList<Carta>)
        + valor() : int
    }

    class JugadaFactory {
        + calcularJugada(cartas: Poker[*])
    }

    abstract class Tarot {
        + modificar(carta: Poker)
    }

    abstract class Palo {
        +sonDelMismoPalo(carta: Poker) : boolean
    }

    Jugador -> Puntaje
    Mano ..> Puntaje
    Mano --> Jugada
    Jugador *-- Mano
    Jugador --> Mazo
    Mano .> Mazo
    Poker *-- Palo
    Mano o-- Poker
    Mazo o-- Poker
    JugadaFactory ...> Jugada
    Jugada o- Poker
    Puntaje <. Jugada
    Poker <. Tarot

@enduml
